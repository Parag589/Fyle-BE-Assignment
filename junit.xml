<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="18" time="0.288" timestamp="2024-04-24T10:48:23.857241" hostname="nutella-ASUS-TUF-Gaming-A15-FA507RE-FA507RE"><testcase classname="tests.principals_test" name="test_get_assignments" time="0.013" /><testcase classname="tests.principals_test" name="test_grade_assignment_draft_assignment" time="0.005" /><testcase classname="tests.principals_test" name="test_grade_assignment" time="0.039" /><testcase classname="tests.principals_test" name="test_regrade_assignment" time="0.013" /><testcase classname="tests.students_test" name="test_get_assignments_student_1" time="0.004" /><testcase classname="tests.students_test" name="test_get_assignments_student_2" time="0.005" /><testcase classname="tests.students_test" name="test_post_assignment_null_content" time="0.002" /><testcase classname="tests.students_test" name="test_post_assignment_student_1" time="0.009" /><testcase classname="tests.students_test" name="test_submit_assignment_student_1" time="0.012" /><testcase classname="tests.students_test" name="test_assignment_resubmit_error" time="0.003" /><testcase classname="tests.teachers_test" name="test_get_assignments_teacher_1" time="0.005" /><testcase classname="tests.teachers_test" name="test_get_assignments_teacher_2" time="0.003" /><testcase classname="tests.teachers_test" name="test_grade_assignment_cross" time="0.002" /><testcase classname="tests.teachers_test" name="test_grade_assignment_bad_grade" time="0.002" /><testcase classname="tests.teachers_test" name="test_grade_assignment_bad_assignment" time="0.004" /><testcase classname="tests.teachers_test" name="test_grade_assignment_draft_assignment" time="0.003" /><testcase classname="tests.SQL.sql_test" name="test_get_assignments_in_graded_state_for_each_student" time="0.005"><failure message="assert 0 == 1">def test_get_assignments_in_graded_state_for_each_student():
        """Test to get graded assignments for each student"""
    
        # Find all the assignments for student 1 and change its state to 'GRADED'
        submitted_assignments: Assignment = Assignment.filter(Assignment.student_id == 1)
    
        # Iterate over each assignment and update its state
        count = 0
        print(submitted_assignments)
        for assignment in submitted_assignments:
            if assignment.state == AssignmentStateEnum.GRADED:
                count+=1  # Or any other desired state
        print(count)
        # Flush the changes to the database session
        db.session.flush()
        # Commit the changes to the database
        db.session.commit()
    
        # Define the expected result before any changes
        expected_result = [(1, 3)]
    
        # Execute the SQL query and compare the result with the expected result
        with open('tests/SQL/number_of_graded_assignments_for_each_student.sql', encoding='utf8') as fo:
            sql = fo.read()
    
        # Execute the SQL query compare the result with the expected result
        sql_result = db.session.execute(text(sql)).fetchall()
        for itr, result in enumerate(expected_result):
&gt;           assert count == sql_result[0][0]
E           assert 0 == 1

tests/SQL/sql_test.py:81: AssertionError</failure></testcase><testcase classname="tests.SQL.sql_test" name="test_get_grade_A_assignments_for_teacher_with_max_grading" time="0.013"><failure message="assert 1 == 2">def test_get_grade_A_assignments_for_teacher_with_max_grading():
        """Test to get count of grade A assignments for teacher which has graded maximum assignments"""
    
        # Read the SQL query from a file
        with open('tests/SQL/count_grade_A_assignments_by_teacher_with_max_grading.sql', encoding='utf8') as fo:
            sql = fo.read()
    
        # Create and grade 5 assignments for the default teacher (teacher_id=1)
        grade_a_count_1 = create_n_graded_assignments_for_teacher(5)
    
        # Execute the SQL query and check if the count matches the created assignments
        sql_result = db.session.execute(text(sql)).fetchall()
        assert grade_a_count_1 == sql_result[0][0]
    
        # Create and grade 10 assignments for a different teacher (teacher_id=2)
        grade_a_count_2 = create_n_graded_assignments_for_teacher(10, 2)
    
        # Execute the SQL query again and check if the count matches the newly created assignments
        sql_result = db.session.execute(text(sql)).fetchall()
&gt;       assert grade_a_count_2 == sql_result[0][0]
E       assert 1 == 2

tests/SQL/sql_test.py:103: AssertionError</failure></testcase></testsuite></testsuites>